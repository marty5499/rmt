#include <remote.h>

// #### test area ####
#include "esp32-hal.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#define NR_OF_LEDS 25
#define NR_OF_ALL_BITS 24 * NR_OF_LEDS
int led_index = 0;
int color[] = {0x5, 0x1, 0x7}; // RGB value
rmt_obj_t *rmt_send = NULL;
rmt_data_t led_data[NR_OF_ALL_BITS];

void startTest()
{
  if ((rmt_send = rmtInit(18, RMT_TX_MODE, RMT_MEM_256)) == NULL)
  {
    Serial.println("init sender failed\n");
  }
  float realTick = rmtSetTick(rmt_send, 100);
  Serial.printf("real tick set to: %fns\n", realTick);
}

void flash()
{
  // Init data with only one led ON
  int led, col, bit;
  int i = 0;
  for (led = 0; led < NR_OF_LEDS; led++)
  {
    for (col = 0; col < 3; col++)
    {
      for (bit = 0; bit < 8; bit++)
      {
        if ((color[col] & (1 << (7 - bit))) && (led == led_index))
        {
          led_data[i].level0 = 1;
          led_data[i].duration0 = 8;
          led_data[i].level1 = 0;
          led_data[i].duration1 = 4;
        }
        else
        {
          led_data[i].level0 = 1;
          led_data[i].duration0 = 4;
          led_data[i].level1 = 0;
          led_data[i].duration1 = 8;
        }
        i++;
      }
    }
  }
  if ((++led_index) >= NR_OF_LEDS)
  {
    led_index = 0;
  }
  // Send the data
  //WiFi.setSleep(false);
  rmtWrite(rmt_send, led_data, NR_OF_ALL_BITS);
}

//
void timerTrigger()
{
    Serial.println("timer trigger..");
}

void onMsg(String msg){
    Serial.println(msg);
    sw = !sw;
    refresh = true;
    flash();
}

void init(){
    Serial.println("init...");
    //WiFi.setSleep(false);
    //startTimer(1000*1000);
    //startTest();

  if ((rmt_send = rmtInit(18, RMT_TX_MODE, RMT_MEM_256)) == NULL)
  {
    Serial.println("init sender failed\n");
  }    
}